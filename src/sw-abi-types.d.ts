/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type SWContractFunctions1 = [] | [SWContractFunctions] | [SWContractFunctions, SWContractEvents];
export type SWEvent = {
  event: SWContractEventType;
  args: any;
}[];


export interface SWContractFunctions {
  addNewCoreTeamMembers: (member: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  coreTeamMembersCount: () => Promise<number>;
  getCoreTeamMembers: () => Promise<string[]>;
  getMemberAddresses: () => Promise<string[]>;
  getMembers: () => Promise<number[]>;
  getSkillWalletAddress: () => Promise<string>;
  getTemplate: () => Promise<number>;
  isCoreTeamMember: (member: string) => Promise<boolean>;
  isMember: (member: string) => Promise<boolean>;
  joinNewMember: (uri: string, role: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  setMetadataUri: (uri: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  setPermissionBadgeAddress: (_permissionBadgeAddr: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  activateSkillWallet: (skillWalletId: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  addDiscordIDToSkillWallet: (discordID: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  addPubKeyToSkillWallet: (skillWalletId: number, pubKey: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  approve: (to: string, tokenId: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  balanceOf: (owner: string) => Promise<number>;
  baseURI: () => Promise<string>;
  claim: () => Promise<{wait: () => Promise<SWContractEvents>}>;
  create: (
    metadata: string,
    template: number,
    rolesCount: number,
    numberOfActions: number,
    partnersContractAddress: string,
    membersAllowed: number,
    coreTeamMembers: number,
    isPermissioned: boolean
  ) => Promise<{wait: () => Promise<SWContractEvents>}>;
  getActiveCommunity: (skillWalletId: number) => Promise<{community: string}>;
  getApproved: (tokenId: number) => Promise<string>;
  getClaimableSkillWalletId: (skillWalletOwner: string) => Promise<number>;
  getCommunityHistory: (skillWalletId: number) => Promise<{communities: string[]}>;
  getContractAddressPerAction: (action: string, caller: string) => Promise<string>;
  getOSMAddress: () => Promise<string>;
  getPubKeyBySkillWalletId: (skillWalletId: number) => Promise<string>;
  getSkillWalletIdByOwner: (skillWalletOwner: string) => Promise<number>;
  getTotalSkillWalletsRegistered: () => Promise<number>;
  initialize: (
    _skillWalletAddress: string,
    _partnersAgreementFactoryAddress: string,
    _membershipFactory: string
  ) => Promise<{wait: () => Promise<SWContractEvents>}>;
  isApprovedForAll: (owner: string, operator: string) => Promise<boolean>;
  isRequestIdValid: (requestId: string) => Promise<boolean>;
  isSkillWalletActivated: (skillWalletId: number) => Promise<{status: boolean}>;
  isSkillWalletClaimable: (skillWalletOwner: string) => Promise<{status: boolean}>;
  isSkillWalletRegistered: (skillWalletOwner: string) => Promise<{status: boolean}>;
  name: () => Promise<string>;
  onERC721Received: () => Promise<string>;
  osmAddress: () => Promise<string>;
  owner: () => Promise<string>;
  ownerOf: (tokenId: number) => Promise<string>;
  renounceOwnership: () => Promise<{wait: () => Promise<SWContractEvents>}>;
  safeTransferFrom: (
    from: string,
    to: string,
    tokenId: number,
    _data: string
  ) => Promise<{wait: () => Promise<SWContractEvents>}>;
  setApprovalForAll: (operator: string, approved: boolean) => Promise<{wait: () => Promise<SWContractEvents>}>;
  skillWalletClaimers: () => Promise<number>;
  skillWalletToDiscordID: () => Promise<string>;
  skillWalletToPubKey: () => Promise<string>;
  supportsInterface: (interfaceId: string) => Promise<boolean>;
  symbol: () => Promise<string>;
  tokenByIndex: (index: number) => Promise<number>;
  tokenOfOwnerByIndex: (owner: string, index: number) => Promise<number>;
  tokenURI: (tokenId: number) => Promise<string>;
  totalSupply: () => Promise<number>;
  transferFrom: (from: string, to: string, tokenId: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  transferOwnership: (newOwner: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  activatePA: () => Promise<{wait: () => Promise<SWContractEvents>}>;
  activities: () => Promise<string>;
  addNewContractAddressToAgreement: (contractAddress: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  addURL: (_url: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  communityAddress: () => Promise<string>;
  createActivity: (_type: number, _uri: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  deployActivities: (_factory: string, _bot: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  finilizeTask: (_activityId: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  getActivitiesAddress: () => Promise<string>;
  getAgreementData: () => Promise<undefined>;
  getAllMembers: () => Promise<string[]>;
  getImportedAddresses: () => Promise<string[]>;
  getInteractionNFT: (user: string) => Promise<number>;
  getInteractionNFTContractAddress: () => Promise<string>;
  getURLs: () => Promise<string[]>;
  isActive: () => Promise<boolean>;
  isURLListed: (_url: string) => Promise<boolean>;
  membershipAddress: () => Promise<string>;
  partnersContracts: () => Promise<string>;
  removeURL: (_url: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  rolesCount: () => Promise<number>;
  takeTask: (_activityId: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
  transferInteractionNFTs: (
    user: string,
    amountOfInteractions: number
  ) => Promise<{wait: () => Promise<SWContractEvents>}>;
  urls: () => Promise<string>;
  version: () => Promise<number>;
  agreementIds: () => Promise<number>;
  agreements: () => Promise<string>;
  getPartnerAgreementAddresses: () => Promise<string[]>;
  migrate: (_agreement: string) => Promise<{wait: () => Promise<SWContractEvents>}>;
  setVersion: (_version: number) => Promise<{wait: () => Promise<SWContractEvents>}>;
}
export interface SWContractEvents {
  events: SWEvent;
}

export enum SWContractEventType {
  CoreTeamMemberAdded = "CoreTeamMemberAdded",
  MemberAdded = "MemberAdded",
  Approval = "Approval",
  ApprovalForAll = "ApprovalForAll",
  DiscordIDConnectedToSkillWallet = "DiscordIDConnectedToSkillWallet",
  OwnershipTransferred = "OwnershipTransferred",
  PubKeyAddedToSkillWallet = "PubKeyAddedToSkillWallet",
  SkillWalletActivated = "SkillWalletActivated",
  SkillWalletClaimed = "SkillWalletClaimed",
  SkillWalletCommunityChanged = "SkillWalletCommunityChanged",
  SkillWalletCreated = "SkillWalletCreated",
  Transfer = "Transfer",
  PartnersContractAdded = "PartnersContractAdded",
  UrlAdded = "UrlAdded",
  TaskTaken = "TaskTaken",
  PartnersAgreementCreated = "PartnersAgreementCreated"
}
